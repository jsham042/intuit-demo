import streamlit as st
import streamlit.components.v1 as components
from specialists_dictionary import SPECIALISTS
from vector_db import get_vector_db

# Configure page
st.set_page_config(
    page_title="Intuit AI Specialist Finder",
    page_icon="üîç",
    layout="centered"
)

# Initialize vector database (cached for performance)
@st.cache_resource
def init_vector_db():
    """Initialize and cache the vector database"""
    return get_vector_db()

# Intuit Design System styling
st.markdown("""
    <style>
    /* FORCE LIGHT THEME - Nuclear option */
    :root {
        color-scheme: light !important;
    }

    /* Intuit Design System - Official Brand Guidelines */
    /* Typography: Avenir Next for Intuit (fallback to similar web fonts) */
    @import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;500;600;700;800&display=swap');

    /* Global styles - 4px grid system */
    html, body, [class*="css"] {
        font-family: 'Nunito Sans', 'Avenir Next', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif !important;
    }

    .stApp {
        background-color: #ffffff;
        padding: 0;
    }

    /* CRITICAL: Force all Streamlit UI elements to light theme */
    * {
        color-scheme: light !important;
    }

    /* Override any dark mode styles globally */
    div, ul, li, span, p, label, input, select, option {
        color-scheme: light !important;
    }

    /* Intuit Color Palette */
    :root {
        --intuit-bright-blue: #055393;
        --intuit-dark-navy: #0D333F;
        --intuit-teal: #3BD85E;
        --intuit-qb-green: #2CA01C;
        --intuit-text-primary: #0D333F;
        --intuit-text-secondary: #39434D;
        --intuit-border: #D1D5D9;
        --intuit-bg-light: #F7F8F9;
    }

    /* Main title styling - Avenir Demi */
    h1 {
        color: var(--intuit-bright-blue) !important;
        font-family: 'Nunito Sans', 'Avenir Next', sans-serif !important;
        font-weight: 700 !important;
        padding-bottom: 16px;
        font-size: 40px !important;
        letter-spacing: -0.02em;
        line-height: 1.2;
    }

    h2 {
        font-family: 'Nunito Sans', 'Avenir Next', sans-serif !important;
        color: var(--intuit-dark-navy) !important;
        font-weight: 700 !important;
        font-size: 28px !important;
        line-height: 1.3;
        margin-bottom: 12px !important;
    }

    h3, h4 {
        font-family: 'Nunito Sans', 'Avenir Next', sans-serif !important;
        color: var(--intuit-text-primary) !important;
        font-weight: 600 !important;
        font-size: 20px !important;
        line-height: 1.4;
    }

    /* All text elements - Avenir Regular */
    p, div, span, label, input, select, textarea {
        font-family: 'Nunito Sans', 'Avenir Next', sans-serif !important;
        color: var(--intuit-text-secondary) !important;
    }

    /* Paragraph and general text */
    p {
        color: var(--intuit-text-secondary) !important;
        line-height: 1.6;
        font-size: 16px;
    }

    /* Markdown content */
    .stMarkdown {
        color: var(--intuit-text-secondary) !important;
    }

    /* Regular text */
    div[data-testid="stMarkdownContainer"] p,
    div[data-testid="stMarkdownContainer"] li,
    div[data-testid="stMarkdownContainer"] div {
        color: var(--intuit-text-secondary) !important;
    }

    /* Dropdown styling */
    .stSelectbox label {
        color: var(--intuit-dark-navy) !important;
        font-family: 'Nunito Sans', sans-serif !important;
        font-weight: 600 !important;
        font-size: 16px !important;
        margin-bottom: 8px !important;
    }

    /* Dropdown container */
    .stSelectbox > div > div {
        background-color: #ffffff !important;
        border: 2px solid var(--intuit-border) !important;
        border-radius: 4px !important;
        font-family: 'Nunito Sans', sans-serif !important;
    }

    /* Dropdown button/input */
    .stSelectbox [data-baseweb="select"] > div {
        background-color: #ffffff !important;
        border-color: var(--intuit-border) !important;
        color: var(--intuit-dark-navy) !important;
    }

    /* Dropdown selected text */
    .stSelectbox [data-baseweb="select"] > div > div {
        color: var(--intuit-dark-navy) !important;
    }

    /* Dropdown arrow icon */
    .stSelectbox [data-baseweb="select"] svg {
        fill: var(--intuit-dark-navy) !important;
    }

    /* Dropdown popover container - BaseWeb */
    [data-baseweb="popover"] {
        background-color: #ffffff !important;
    }

    /* Dropdown options menu */
    .stSelectbox [role="listbox"],
    [data-baseweb="menu"],
    [data-baseweb="popover"] [role="listbox"] {
        background-color: #ffffff !important;
        border: 2px solid var(--intuit-border) !important;
        border-radius: 4px !important;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
    }

    /* Dropdown option items - force white background and dark text */
    .stSelectbox [role="option"],
    [data-baseweb="menu"] li,
    [role="listbox"] [role="option"] {
        color: #0D333F !important;
        background-color: #ffffff !important;
        font-family: 'Nunito Sans', sans-serif !important;
        padding: 12px 16px !important;
    }

    /* Dropdown option items - all child elements */
    .stSelectbox [role="option"] *,
    [data-baseweb="menu"] li *,
    [role="listbox"] [role="option"] * {
        color: #0D333F !important;
        background-color: transparent !important;
    }

    /* Dropdown option hover */
    .stSelectbox [role="option"]:hover,
    .stSelectbox [role="option"]:hover *,
    [data-baseweb="menu"] li:hover,
    [data-baseweb="menu"] li:hover * {
        background-color: #F7F8F9 !important;
        color: #0D333F !important;
    }

    /* Dropdown option selected/active */
    .stSelectbox [aria-selected="true"],
    .stSelectbox [aria-selected="true"] *,
    [data-baseweb="menu"] li[aria-selected="true"],
    [data-baseweb="menu"] li[aria-selected="true"] * {
        background-color: rgba(5, 83, 147, 0.1) !important;
        color: #0D333F !important;
    }

    /* Force dropdown menu background - all variations */
    .stSelectbox ul,
    .stSelectbox ul li,
    [data-baseweb="menu"] ul,
    [data-baseweb="menu"] ul li {
        background-color: #ffffff !important;
        color: #0D333F !important;
    }

    /* Native select element if used */
    .stSelectbox select {
        background-color: #ffffff !important;
        color: #0D333F !important;
    }

    .stSelectbox select option {
        background-color: #ffffff !important;
        color: #0D333F !important;
        padding: 12px 16px !important;
    }

    .stSelectbox > div > div:hover {
        border-color: var(--intuit-bright-blue) !important;
    }

    .stSelectbox > div > div:focus-within,
    .stSelectbox [data-baseweb="select"]:focus-within {
        border-color: var(--intuit-bright-blue) !important;
        box-shadow: 0 0 0 3px rgba(5, 83, 147, 0.1) !important;
    }

    /* Text input & textarea styling */
    .stTextInput label, .stTextArea label {
        color: var(--intuit-dark-navy) !important;
        font-family: 'Nunito Sans', sans-serif !important;
        font-weight: 600 !important;
        font-size: 16px !important;
        margin-bottom: 8px !important;
    }

    .stTextInput > div > div > input,
    .stTextArea > div > div > textarea {
        background-color: #ffffff;
        border: 2px solid var(--intuit-border);
        border-radius: 4px;
        font-family: 'Nunito Sans', sans-serif !important;
        color: var(--intuit-text-primary) !important;
        font-size: 16px !important;
        padding: 12px !important;
    }

    .stTextInput > div > div > input::placeholder,
    .stTextArea > div > div > textarea::placeholder {
        color: #8A9199 !important;
        opacity: 1;
    }

    .stTextInput > div > div > input:hover,
    .stTextArea > div > div > textarea:hover {
        border-color: var(--intuit-bright-blue);
    }

    .stTextInput > div > div > input:focus,
    .stTextArea > div > div > textarea:focus {
        border-color: var(--intuit-bright-blue) !important;
        box-shadow: 0 0 0 3px rgba(5, 83, 147, 0.1) !important;
        outline: none !important;
    }

    /* Slider styling */
    .stSlider label {
        color: var(--intuit-dark-navy) !important;
        font-family: 'Nunito Sans', sans-serif !important;
        font-weight: 600 !important;
        font-size: 16px !important;
        margin-bottom: 8px !important;
    }

    .stSlider [data-testid="stTickBarMin"],
    .stSlider [data-testid="stTickBarMax"],
    .stSlider [data-baseweb="slider"] > div > div {
        color: var(--intuit-text-secondary) !important;
        font-size: 14px !important;
    }

    /* Slider track */
    .stSlider [data-baseweb="slider"] [role="slider"] {
        background-color: var(--intuit-bright-blue) !important;
    }

    /* Container styling */
    .element-container {
        font-family: 'Nunito Sans', sans-serif !important;
        margin-bottom: 16px;
    }

    /* Intuit brand accent */
    .intuit-brand {
        border-left: 4px solid var(--intuit-bright-blue);
        padding-left: 16px;
        margin-bottom: 24px;
    }

    /* Button styling - Intuit Primary Button */
    .stButton > button {
        background-color: var(--intuit-bright-blue);
        color: #ffffff !important;
        border: none;
        border-radius: 4px;
        padding: 12px 24px;
        font-family: 'Nunito Sans', sans-serif !important;
        font-weight: 600;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }

    /* Ensure button text is always white */
    .stButton > button p,
    .stButton > button span,
    .stButton > button div {
        color: #ffffff !important;
    }

    .stButton > button:hover {
        background-color: #044170;
        box-shadow: 0 4px 8px rgba(5, 83, 147, 0.2);
        transform: translateY(-1px);
    }

    .stButton > button:active {
        background-color: #033152;
        transform: translateY(0);
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    /* Info/Warning/Success boxes */
    .stAlert {
        font-family: 'Nunito Sans', sans-serif !important;
        border-radius: 4px !important;
        border-left-width: 4px !important;
        padding: 16px !important;
    }

    .stAlert p, .stAlert div, .stAlert span {
        color: var(--intuit-dark-navy) !important;
        font-weight: 500;
        font-size: 15px;
    }

    /* Spinner text */
    .stSpinner > div {
        color: var(--intuit-text-secondary) !important;
    }

    /* Expander styling */
    .streamlit-expanderHeader {
        font-family: 'Nunito Sans', sans-serif !important;
        font-weight: 600 !important;
        font-size: 16px !important;
        color: var(--intuit-dark-navy) !important;
        background-color: var(--intuit-bg-light) !important;
        border-radius: 4px !important;
        padding: 12px 16px !important;
    }

    .streamlit-expanderHeader p {
        color: var(--intuit-dark-navy) !important;
    }

    .streamlit-expanderHeader:hover {
        background-color: #EEF0F2 !important;
    }

    .streamlit-expanderContent {
        font-family: 'Nunito Sans', sans-serif !important;
    }

    .streamlit-expanderContent p,
    .streamlit-expanderContent li,
    .streamlit-expanderContent div {
        color: var(--intuit-text-secondary) !important;
    }

    /* Code blocks */
    code {
        font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;
        background-color: var(--intuit-bg-light);
        padding: 4px 8px;
        border-radius: 4px;
        color: var(--intuit-bright-blue) !important;
        font-size: 14px;
    }

    /* Strong/Bold text - Avenir Medium */
    strong, b {
        color: var(--intuit-dark-navy) !important;
        font-weight: 600;
    }

    /* Lists */
    ul, ol, li {
        color: var(--intuit-text-secondary) !important;
        line-height: 1.6;
    }

    /* Hide debug output and exceptions */
    .stException {
        display: none !important;
    }

    /* Ensure no overflow text */
    .stApp > footer {
        display: none !important;
    }

    /* Hide any Streamlit debug elements */
    [data-testid="stStatusWidget"] {
        display: none !important;
    }

    /* Hide Streamlit's development mode toolbar */
    .stDeployButton {
        display: none !important;
    }

    /* Hide any floating elements that might overlap */
    [data-testid="stFloatingElement"] {
        display: none !important;
    }

    /* Prevent overlapping elements */
    .element-container {
        position: relative !important;
        clear: both !important;
        z-index: 1 !important;
    }

    /* Hide browser credential/autofill prompts */
    input::-webkit-credentials-auto-fill-button {
        display: none !important;
    }

    /* Ensure expander is not overlapped */
    details {
        position: relative !important;
        z-index: 10 !important;
        clear: both !important;
        margin-top: 16px !important;
        margin-bottom: 32px !important;
    }

    /* Main content padding - 4px grid */
    .main .block-container {
        padding-top: 32px;
        padding-bottom: 64px !important;
        padding-left: 40px;
        padding-right: 40px;
        max-width: 1200px;
        min-height: 100vh;
        position: relative !important;
    }

    /* Ensure content doesn't overlap */
    .main {
        overflow: visible !important;
    }

    /* Hide browser autofill styling that might interfere */
    input:-webkit-autofill {
        -webkit-text-fill-color: var(--intuit-text-primary) !important;
    }

    /* DROPDOWN FIX - Target emotion cache classes directly */
    li[role="option"] {
        color: #0D333F !important;
        background-color: #ffffff !important;
    }

    li[role="option"] div,
    li[role="option"] * {
        color: #0D333F !important;
        background-color: transparent !important;
    }

    li[role="option"]:hover {
        background-color: #F7F8F9 !important;
    }
    </style>
""", unsafe_allow_html=True)

# Header with Intuit branding
st.markdown("""
<style>
    .stImage {
        border-radius: 0px !important;
    }
    .stImage img {
        border-radius: 0px !important;
    }
</style>
""", unsafe_allow_html=True)

st.image('intuit-cornerstone-brand-lockup-1-line-color.svg', width=500)

st.markdown("""
<h1 style='color: #055393; font-family: "Nunito Sans", "Avenir Next", sans-serif; font-weight: 700; font-size: 40px; letter-spacing: -0.02em; line-height: 1.2; margin-top: 24px; margin-bottom: 16px;'>
    AI Specialist Finder
</h1>
""", unsafe_allow_html=True)

st.markdown("""
<div style='color: #39434D; font-family: "Nunito Sans", "Avenir Next", sans-serif; font-size: 18px; line-height: 1.6; margin-bottom: 32px;'>
    Use AI-powered semantic search to find the best specialist for your customer's needs.
</div>
""", unsafe_allow_html=True)

# Initialize the vector database
try:
    vector_db = init_vector_db()
except Exception as e:
    st.error(f"Error initializing vector database: {str(e)}")
    st.stop()

# User input
user_query = st.text_area(
    "Describe the customer's issue or question",
    placeholder="Example: Customer needs help reconciling their bank account in QuickBooks and is seeing discrepancies...",
    height=100,
    key="user_query_input"
)

# Initialize session state for keyboard trigger
if 'trigger_search' not in st.session_state:
    st.session_state.trigger_search = False

# Add JavaScript to enable Ctrl/Cmd+Enter to trigger search
components.html("""
<script>
    const doc = window.parent.document;
    
    // Function to add keyboard listener
    function addKeyboardListener() {
        const textarea = doc.querySelector('textarea[aria-label="Describe the customer\'s issue or question"]');
        
        if (textarea && !textarea.dataset.listenerAdded) {
            textarea.dataset.listenerAdded = 'true';
            
            textarea.addEventListener('keydown', function(e) {
                // Check for Ctrl+Enter (Windows/Linux) or Cmd+Enter (Mac)
                if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                    e.preventDefault();
                    
                    // Find and click the search button
                    const buttons = doc.querySelectorAll('button[kind="primary"]');
                    if (buttons.length > 0) {
                        buttons[0].click();
                    }
                }
            });
        }
    }
    
    // Try multiple times to attach the listener
    addKeyboardListener();
    setTimeout(addKeyboardListener, 100);
    setTimeout(addKeyboardListener, 500);
    setTimeout(addKeyboardListener, 1000);
</script>
""", height=0)

# Search button
search_button = st.button("üîç Find Best Specialist", type="primary")

# Perform search
if search_button:
    if not user_query.strip():
        st.warning("Please enter a description of the customer's issue.")
    else:
        with st.spinner("Searching for the best specialist..."):
            # Search the vector database - get top 20 results
            results = vector_db.search(
                query=user_query,
                top_k=20,
                score_threshold=0.0  # Get all results, they're already sorted by score
            )

            if not results:
                st.warning("No specialists found. Please try a different query.")
            else:
                # Store results in session state for the dropdown
                st.session_state['search_results'] = results

# Display results in dropdown if available
if 'search_results' in st.session_state and st.session_state['search_results']:
    results = st.session_state['search_results']

    # Create dropdown options from results, ordered by confidence score
    dropdown_options = {}
    for i, result in enumerate(results):
        option_label = f"{result['name']} ({result['specialist_id']})"
        dropdown_options[option_label] = result

    # Dropdown for selecting specialist
    st.markdown("<br>", unsafe_allow_html=True)
    selected_option = st.selectbox(
        "Select a specialist:",
        options=list(dropdown_options.keys()),
        index=0
    )

    # Get the selected specialist
    selected_specialist = dropdown_options[selected_option]

    # Display selected specialist description
    st.markdown("<br>", unsafe_allow_html=True)
    st.markdown(f"**{selected_specialist['name']}** ({selected_specialist['specialist_id']})")
    st.markdown(f"<div style='background-color: #F7F8F9; padding: 16px; border-radius: 4px; border-left: 4px solid #055393; font-family: \"Nunito Sans\", sans-serif; line-height: 1.6; color: #39434D; margin-top: 8px;'>{selected_specialist['description']}</div>", unsafe_allow_html=True)

    # Action button
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button(f"Route to {selected_specialist['name']}", type="primary"):
        st.success(f"Routing customer to {selected_specialist['name']} ({selected_specialist['specialist_id']})")
